;;; -*- mode: emacs-lisp -*-
;;; .emacs --- take care of business

;;; Code:
;;; Commentary:
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(global-linum-mode 1)

(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t
      make-backup-files nil
      byte-compile-warnings '(not free-vars)
      ad-redefinition-action 'accept)

(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(setq package-list (quote (yasnippet zoom-frm sass-mode emmet-mode alchemist elixir-mode sr-speedbar fill-column-indicator yaml-mode elscreen evil-magit web-mode magit indent-guide projectile-rails linum-relative helm-ag helm-projectile evil-leader projectile evil ruby-end exec-path-from-shell ido-vertical-mode flx-ido key-chord smartparens ace-jump-mode diff-hl coffee-mode json-mode solarized-theme smart-mode-line company browse-at-remote telephone-line flycheck)))

(dolist (package package-list)
  (print package)
  (unless (package-installed-p package)
    (package-install package)))

(require 'evil)
(evil-mode 1)

(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

(dolist (package package-list)
  (require package))

(elscreen-start)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-C-p-up-and-down)

;; LOAD ALL THE THINGS
(dolist (elt (file-expand-wildcards "~/.dotfiles/emacs/autoload/*.el"))
  (load elt))

;; (setq mode-line-format 
;;       '("%e" mode-line-front-space " " mode-line-client mode-line-modified mode-line-remote " " mode-line-buffer-identification sml/pos-id-separator mode-line-position evil-mode-line-tag
;;        sml/pre-modes-separator mode-line-modes mode-line-misc-info "  " mode-line-end-spaces))
;; (setq display-time-default-load-average nil)
;; (setq sml/no-confirm-load-theme t
;;       sml/position-percentage-format nil
;;       sml/mode-width 'full
;;       sml/name-width 40
;;       sml/theme 'respectful
;;       sml/shorten-modes t)
;; (add-to-list 'sml/replacer-regexp-list '("~/Code/\([^/]+\)" ":C:\1/") t)
;; (sml/setup)
(defun add-mode-line-dirtrack ()
    "When editing a file, show the last 2 directories of the current path in the mode line."
    (add-to-list 'mode-line-buffer-identification 
                 '(:eval (substring default-directory 
                                    (+ 1 (string-match "/[^/]+/[^/]+/$" default-directory)) nil))))
(add-hook 'find-file-hook 'add-mode-line-dirtrack)
(telephone-line-defsegment tel-line-not-buffer
  '(""
    mode-line-mule-info
    mode-line-modified
    mode-line-client
    mode-line-remote
    mode-line-frame-identification)
  )

(telephone-line-defsegment tel-line-buffer
  (telephone-line-raw mode-line-buffer-identification t)
  )

(telephone-line-defsegment tel-line-projectile
  (if (projectile-project-p)
      (projectile-project-name)))

(setq telephone-line-lhs
        '((evil   . (telephone-line-evil-tag-segment))
          (nil    . (telephone-line-erc-modified-channels-segment
                     telephone-line-process-segment
                     tel-line-not-buffer))
          (accent . (tel-line-projectile))
          (nil    . (tel-line-buffer))))
(setq telephone-line-rhs
        '((nil    . (telephone-line-misc-info-segment))
          (accent . (telephone-line-major-mode-segment))
          ))
(telephone-line-mode t)

(setq yas-snippet-dirs
      '(yas-installed-snippets-dir
        "~/.dotfiles/emacs/yasnippet-snippets/"))

;;; COMPANY

(global-set-key (kbd "C-.") 'company-complete)
(setq company-idle-delay 0.1)

(with-eval-after-load 'company
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous))

(setq windmove-wrap-around t)
(setq-default abbrev-mode t)

(linum-relative-on)
(indent-guide-global-mode)
(setq indent-guide-recursive t)

(global-hl-line-mode)

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(setq create-lockfiles nil)

;;; esc always quits
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))

(global-set-key [tab] 'tab-indent-or-complete)

;; source: http://steve.yegge.googlepages.com/my-dot-emacs-file
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))

(defun modify-syntax-table-for-jsx ()
  (modify-syntax-entry ?< "(>")
  (modify-syntax-entry ?> ")<"))

(add-hook 'after-init-hook 'global-company-mode)
(add-hook 'after-init-hook 'yas-global-mode)

;; -------------------------------------------------------------------
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#272822" "#f92672" "#a6e22e" "#f4bf75" "#66d9ef" "#ae81ff" "#66d9ef" "#f8f8f2"])
 '(ansi-term-color-vector
   [unspecified "#272822" "#f92672" "#a6e22e" "#f4bf75" "#66d9ef" "#ae81ff" "#66d9ef" "#f8f8f2"])
 '(column-number-mode nil)
 '(company-dabbrev-downcase nil)
 '(compilation-message-face (quote default))
 '(cua-global-mark-cursor-color "#2aa198")
 '(cua-normal-cursor-color "#657b83")
 '(cua-overwrite-cursor-color "#b58900")
 '(cua-read-only-cursor-color "#859900")
 '(custom-safe-themes
   (quote
    ("ef43b8018c63a775d44543dc52e9a0fd7cc08f8cc55d6b1fa1a384697e641ea2" "ed92d0bce9db713d64bfda08bfa2374926c1842575303618ab6423e325bdd4af" "59cd1b0c277f2c315bc90fafbc177f66e9e0d0e250e40c50a399a1aafb82de5e" "7168317924f121e8f1efbbc8621fd694fc77cbaec8db4ce3bddc3a503ff9f41a" "7666161e5edcb0422c32d3170cc80871c6dbccdbcd4a9e8e2d65df1f5a3c2962" "f7d903000af7467aa1f1451846b943e517bffb00477b4a6e3461d9cd0eaf9f1c" "f104c8794328c14f9215eb43bad93571e432aec45f7e143554dca2fc8deab64f" "f107c4c836c2ff106f2827cb32ee5081c8a253ec9294e1e9bba636e3878468b4" "f269c43f6f4d26233d3cbbbdfe268c4ac225406c8394d19dfd86770b7bda0735" "9001b0086391df936bf52a4527cd0a1ee3dfee097f4e0b538fb8cafc369cf23b" "e7df50d6006407eebafda5ad143fb9b473fe2e578e236f4d89ec8f953d86a910" "b950cd1f3caa85b86f0460f63286b61f8cea0ae1411300b90891a7f4b68a889c" "fec119f4dca097ac298801f88b06bb3593396fc4c594f304c62b608cad68da7a" "c216477bfe289993bc85787dcadb02538619620eee71144d93385dbb8da14953" "aa5ac282a46c235538e256ff8c140d96e9bdeee228b3c932f2de150c5b287f1f" "8d00e8e3081c30b6ab02582dbf13740537700491b61287117d983254a5bc30c9" "c1bfc9c956039aa5607a0e14f3dd8edd8d42003bff0f165e2188cd7ad34362a4" "b385cb4afb52742c8a2dee4cd545d783edfec5badd431c6c2c3efe7ad24b18e6" "3515347d3568131ac195fd801d6b1ea5094864a8471809a2fee8af5c4677865a" "4f608b762b9cb99f1b48ed5c7cc1fc946254804b83e24379d923ae15d80d0f5b" "4b61485ae11278df78153d6509c199dccaaad51ce1babf28f9ad3b20996922a4" "6103a1fd48aea41b8d32448652e124e8527fe79076a3bc30d7a85b4931715a0e" "56be376acc51d6a6baaba225fb88cc96424358bd124bc67c37f775b9a30afd4b" "199b61f9a979e9c0886be1794dd44c12d0f5fa45aab5581521ee01bf73bc9c92" "14c769ded21d91b37effb27d4cd75fb57a3cc2ea54e346696142fd40d04c558e" "6732fbc09dc6d4efa06faee2284b556f01d8316796c80f0d2faec24d7fd5cb51" "350039a6d1aa609aa1583648a53ee434d2b072e5480fbbb44e6687491ef00b8b" "33407ed2ebd197e15c2ca5b9afa04f6ecc28df077445156246f15385e170a7ae" "c07f78bb3c3bd7df0b0842043bbd8337787d78f5325687559329d4a6a35dbde1" "530999f907aa67b54f7d09296ff9d446587764eef9a8d245a609a94691f6c39a" "629f71caf6471a98bfa5986753833a96922ae15a5e13573d5dccc4e2f1f69ab2" "2ca74f36112c389d5e68374cbed76fc3293b64ae988c78634903f89d80b08c6c" "56e6c662525834476e44609b9e9ba4b36a39f3a01d0bfe5b749d0facc7657e8d" "95a19489128a2154c8d6a0e2941ed7b6c5fdf312bdb4f500f39c7e4924b2c747" "d410ab3dcbeb7385911bd2e8093b46295f36bf82e8f9c4d8b67928e563f14645" "388f598a9f5dd3d60c9e40d304cec25c62c5fb5f29149622a2bc421855ddccc7" "7845b5cb5a557a1bb8fee7ec55768ddf60ecdd310dfb965d68ef3537685871f8" "4a2ec7a347eed914f7eed8ababdbb110a03f2f4c23b12cc5f76c9763719e9b24" "7321c783cf3dd9f4f010d52ba7e7c19b748e170b2b9f811877614421f529bb7e" "4c1291f3d251be8b7e4aebae5b6ba20fcb41d2a9cb34d18c170730262718407b" "89eccb8743a7019bc9fce5b2c725d4156a27ba1000ebf7cb60e48ab281a6f2d0" "0949a3f4ac2735c6bce3d4cb118211e3fc893baad7fee073092c1b631c6c78b1" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "7746651fe1f4c2f37d5a0bd4386f026d9adf361a97bbb4522bda45705c79692f" "3d911fbb499640607201ce789cf86f2fbc06ff25db77be3efc6ccb3b9b64a02b" "0f4be770d01b04e9b5ed2d22605241a9f5eec920c9e3cb1134ac298f4378cd6f" "802d89a2cadb5957de9a621fcb84a4efbb3112f0f346b4cb4d4439013ef9132e" "0bb8220386b6278be8d3519029da0bd6f96d17da6d3694d03218195441fb2808" "3616734460b2e5eb3e00d4e15d8c2d92b935e3dc0491bca00d042a7fb0821ea9" "4b27e83eb6f581b094767ce296dddc703dc055c34586586ddf059035e97cc866" "78bf41cdf8dce722b6e04ef789e09dd085e36700a28c9b74fd9f6ba5a1875ec3" "4434cfc1946e6f11d250a3975520e25c5f33ef317ae970044fa7a66977aa57da" "2a07975ec5ebe65da76fa3193e5e6500f63f22d01146231d46d3af6e63f59b4c" "edcb52500eb4a8c13fd94870175a5748b3a24fe8432c2ed0f3c077dace23cc4a" "6431fc318d1176ac3c372ab03fef94b8777316e84ab0351dc13d08b1fca16353" "d43120398682953ef18fd7e11e69c94e44d39bb2ab450c4e64815311542acbff" "b04425cc726711a6c91e8ebc20cf5a3927160681941e06bc7900a5a5bfe1a77f" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "8e3f020f1ce69cfa0c1ebee4e198feb28dd7eb31b7d77927e9c790819210c654" "930227e22122d1881db7c2c1ae712dcf715697a1c4d9864f8107a2c3c2da9f8b" "a17f246690840fcf3fc26cb845ffedd2d8e1161cae386c14df61dabb9af3a5a9" "0bd7a42bd443517e5e61dac3cabc24018fbd0c6b2b4199b3c4efd9e3727efd30" "cb18233197cedab557c70d171b511bed49cc702f428750925280090c31498bd2" "b3ce6fadd85126d247b72d4ed9ac4d2bb43c0e0fd1605008cafd54185f30b7eb" "aed73c6d0afcf2232bb25ed2d872c7a1c4f1bda6759f84afc24de6a1aec93da8" "232f715279fc131ed4facf6a517b84d23dca145fcc0e09c5e0f90eb534e1680f" "0b6645497e51d80eda1d337d6cabe31814d6c381e69491931a688836c16137ed" "b6db49cec08652adf1ff2341ce32c7303be313b0de38c621676122f255ee46db" "e1551b5516e0a439b6ab019ba00cee866e735f66f22ff67a5d882ad0f1383454" "50e7f9d112e821e42bd2b8410d50de966c35c7434dec12ddea99cb05dd368dd8" default)))
 '(diff-hl-margin-mode t)
 '(display-time-default-load-average nil)
 '(display-time-mode t)
 '(elscreen-display-screen-number nil)
 '(elscreen-display-tab 30)
 '(elscreen-prefix-key (kbd "C-c e"))
 '(elscreen-tab-display-control nil)
 '(elscreen-tab-display-kill-screen nil)
 '(evil-shift-round nil)
 '(evil-shift-width 2)
 '(flycheck-disabled-checkers (quote (javascript-jshint)))
 '(global-flycheck-mode t)
 '(helm-ag-base-command "/usr/local/bin/ag --nocolor --nogroup")
 '(helm-ag-insert-at-point (quote symbol))
 '(helm-completion-in-region-fuzzy-match t)
 '(helm-mode nil)
 '(helm-mode-fuzzy-match t)
 '(helm-prevent-escaping-from-minibuffer nil)
 '(highlight-changes-colors (quote ("#d33682" "#6c71c4")))
 '(highlight-symbol-colors
   (--map
    (solarized-color-blend it "#fdf6e3" 0.25)
    (quote
     ("#b58900" "#2aa198" "#dc322f" "#6c71c4" "#859900" "#cb4b16" "#268bd2"))))
 '(highlight-symbol-foreground-color "#586e75")
 '(highlight-tail-colors
   (quote
    (("#eee8d5" . 0)
     ("#B4C342" . 20)
     ("#69CABF" . 30)
     ("#69B7F0" . 50)
     ("#DEB542" . 60)
     ("#F2804F" . 70)
     ("#F771AC" . 85)
     ("#eee8d5" . 100))))
 '(hl-bg-colors
   (quote
    ("#DEB542" "#F2804F" "#FF6E64" "#F771AC" "#9EA0E5" "#69B7F0" "#69CABF" "#B4C342")))
 '(hl-fg-colors
   (quote
    ("#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3")))
 '(js-indent-level 2)
 '(line-number-mode nil)
 '(line-spacing 0)
 '(linum-relative-current-symbol "")
 '(linum-relative-global-mode t)
 '(magit-diff-use-overlays nil)
 '(magit-popup-use-prefix-argument (quote popup))
 '(magit-save-repository-buffers nil)
 '(nrepl-message-colors
   (quote
    ("#dc322f" "#cb4b16" "#b58900" "#546E00" "#B4C342" "#00629D" "#2aa198" "#d33682" "#6c71c4")))
 '(package-selected-packages
   (quote
    (rainbow-delimiters flycheck-elixir-credo markdown-mode flycheck evil-magit 0blayout slim-mode mmm-mode writeroom-mode rainbow-mode telephone-line browse-at-remote company-mode yasnippet zoom-frm sass-mode emmet-mode alchemist elixir-mode sr-speedbar yaml-mode elscreen web-mode ## helm-dash indent-guide projectile-rails linum-relative helm-ag helm-projectile evil-leader projectile evil)))
 '(pos-tip-background-color "#eee8d5")
 '(pos-tip-foreground-color "#586e75")
 '(projectile-generic-command "ag -g \"\"")
 '(projectile-global-mode t)
 '(projectile-mode-line (quote Ⓟ))
 '(projectile-switch-project-action (quote helm-projectile-find-file))
 '(rm-blacklist
   (quote
    (" hl-p" "company" "yas" "Projectile" "ing" "LR" "Undo-Tree" "Abbrev" "hs")))
 '(ruby-end-insert-newline nil)
 '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#eee8d5" 0.2))
 '(sml/directory-truncation-string "")
 '(sml/mode-width (quote full))
 '(sml/modified-char "*")
 '(sml/replacer-regexp-list
   (quote
    (("^~/org/" ":Org:")
     ("^~/\\.emacs\\.d/elpa/" ":ELPA:")
     ("^~/\\.emacs\\.d/" ":ED:")
     ("^/sudo:.*:" ":SU:")
     ("^~/Documents/" ":Doc:")
     ("^~/Dropbox/" ":DB:")
     ("^:\\([^:]*\\):Documento?s/" ":\\1/Doc:")
     ("^~/[Gg]it/" ":Git:")
     ("^~/[Gg]it[Hh]ub/" ":Git:")
     ("^~/[Gg]it\\([Hh]ub\\|\\)-?[Pp]rojects/" ":Git:")
     ("~/Code/([^/]+)" ":C:"))))
 '(speedbar-show-unknown-files t)
 '(term-scroll-show-maximum-output t)
 '(term-scroll-to-bottom-on-output t)
 '(typescript-indent-level 2)
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#dc322f")
     (40 . "#c85d17")
     (60 . "#be730b")
     (80 . "#b58900")
     (100 . "#a58e00")
     (120 . "#9d9100")
     (140 . "#959300")
     (160 . "#8d9600")
     (180 . "#859900")
     (200 . "#669b32")
     (220 . "#579d4c")
     (240 . "#489e65")
     (260 . "#399f7e")
     (280 . "#2aa198")
     (300 . "#2898af")
     (320 . "#2793ba")
     (340 . "#268fc6")
     (360 . "#268bd2"))))
 '(vc-annotate-very-old-color nil)
 '(web-mode-attr-indent-offset 2)
 '(web-mode-code-indent-offset 2)
 '(web-mode-css-indent-offset 2)
 '(web-mode-markup-indent-offset 2)
 '(web-mode-sql-indent-offset 2)
 '(weechat-color-list
   (quote
    (unspecified "#fdf6e3" "#eee8d5" "#990A1B" "#dc322f" "#546E00" "#859900" "#7B6000" "#b58900" "#00629D" "#268bd2" "#93115C" "#d33682" "#00736F" "#2aa198" "#657b83" "#839496")))
 '(xterm-color-names
   ["#eee8d5" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#073642"])
 '(xterm-color-names-bright
   ["#fdf6e3" "#cb4b16" "#93a1a1" "#839496" "#657b83" "#6c71c4" "#586e75" "#002b36"]))
  
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight light :height 120 :width normal :family "SF Mono"))))
 '(diff-hl-change ((t (:background "LightBlue1" :foreground "SteelBlue1"))))
 '(sml/modified ((t (:inherit (sml/prefix sml/not-modified) :weight bold))))
 '(sml/not-modified ((t (:inherit sml/global\
))))
 '(term ((t (:inherit default)))))
