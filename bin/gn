#!/bin/bash

arg=$1
token=$(yq '."github.com"[0].oauth_token' ~/.config/hub)
api_request="curl -H Authorization:\ token\ $token"
if [ "$arg" = "clear" ]; then
    eval $api_request -X PUT https://api.github.com/notifications -d '{}'
    echo cleared all notifications
elif [ "$arg" = "open" ]; then
     open https://github.com/notifications
elif [ "$arg" = "live" ]; then
    ghub notifications 2>/dev/null | jq -r 'group_by(.repository.full_name)
    | .[]
    | .[]
    | { title: .subject.title, repo: .repository.full_name, type: .subject.type, url: .subject.url | sub("api\\."; "") | sub("github.com/repos"; "github.com") | sub("/pulls/"; "/pull/") }
    | @text "\u001B[1;32m\(.title)\u001B[0m \u001B[1;30m\(.repo) \u001B[0m\(.url)"' |
	tail -r |
	fzf --ansi --bind 'ctrl-o:execute(echo {} | egrep -o "https://.+" | xargs open -g)' |
	egrep -o "https://.+" |
	xargs open
else
    ghub notifications 2>/dev/null | jq -r 'group_by(.repository.full_name)
    | .[]
    | .[]
    | { title: .subject.title, repo: .repository.full_name, type: .subject.type, url: .subject.url | sub("api\\."; "") | sub("github.com/repos"; "github.com") | sub("/pulls/"; "/pull/") }
    | @text "\u001B[1;32m\(.title)\u001B[0m \u001B[1;30m\(.repo)\n\u001B[0m\(.url)\n"'
fi


