;; -*- mode: emacs-lisp -*-
;;; .emacs --- take care of business

;;; Code:
;;; Commentary:
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(global-linum-mode 1)

(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t
      make-backup-files nil
      ad-redefinition-action 'accept)

(define-key global-map (kbd "RET") 'newline-and-indent)

(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(setq package-list (quote (jsx-mode yasnippet zoom-frm sass-mode emmet-mode alchemist elixir-mode ruby-refactor ruby-guard sr-speedbar multiple-cursors fill-column-indicator js2-mode yaml-mode buffer-move elscreen evil-magit web-mode magit indent-guide projectile-rails linum-relative helm-ag helm-projectile evil-leader projectile evil ruby-end exec-path-from-shell ido-vertical-mode flx-ido key-chord rich-minority smartparens ace-jump-mode diff-hl diminish git-timemachine)))

(dolist (package package-list)
  (print package)
  (unless (package-installed-p package)
    (package-install package)))

(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)

(require 'smartparens-config)

;; (add-to-list 'load-path (expand-file-name "~/.dotfiles/emacs/themes"))
(add-to-list 'custom-theme-load-path "~/.dotfiles/emacs/themes")

(load-theme 'base16-oceanicnext-dark t)

(require 'ido-vertical-mode)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-C-p-up-and-down)

(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

(setq helm-dash-browser-func 'eww)
(elscreen-start)

(require 'evil)
(global-evil-leader-mode)
(evil-mode 1)

(require 'key-chord)
(key-chord-mode 1)
(key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
(key-chord-define evil-insert-state-map "fs" 'save-buffer-always)
(key-chord-define evil-insert-state-map ",," 'ace-jump-mode)
(define-key evil-normal-state-map (kbd ",,") 'ace-jump-mode)

(require 'evil-magit)

(setq evil-shift-width 2)
(setq-default indent-tabs-mode nil)

;; (setq sml/no-confirm-load-theme t
;;       sml/theme 'respectful
;;       powerline-arrow-shape 'arrow
;;       sml/mode-width 0
;;       sml/name-width 20
;;       sml/mode-width 4 
;;       sml/shorten-modes t)
;; (rich-minority-mode 1)
;; (sml/setup)

(setq yas-snippet-dirs
      '(yas-installed-snippets-dir
        "~/.dotfiles/emacs/yasnippet-snippets/"))

;; (evil-ex-define-cmd "AV")

(define-key evil-normal-state-map "[b" 'previous-buffer)
(define-key evil-normal-state-map "]b" 'next-buffer)

(defun save-buffer-always ()
  "Save this buffer even if it hasn't been modieifed."
  (interactive)
  (set-buffer-modified-p t)
  (save-buffer))

(defun toggle-comment-on-line ()
  "comment or uncomment current line"
  (interactive)
  (comment-or-uncomment-region (line-beginning-position) (line-end-position)))

(defun custom-comment-line ()
  "Comment lines the way I want to."
  (interactive)
  (if (evil-visual-state-p)
      (call-interactively 'comment-or-uncomment-region)
      (call-interactively 'toggle-comment-on-line)))

(defun replace-symbol ()
  "EVIL: search for instances of the symbol under the cursor."
  (interactive)
  (let (from to sym)
    (if (use-region-p)
        (progn
          (setq sym (buffer-substring-no-properties (mark) (point))))
        (progn
          (save-excursion
            (skip-syntax-backward "w_") (setq from (point)))
          (save-excursion
            (skip-syntax-forward "w_") (setq to (point)))
          (setq sym (buffer-substring-no-properties to from))))
    (evil-ex (concat "%s/" sym "/"))))

(defun find-symbol-in-project ()
  "Search for symbol in project using projectile-ag"
  (interactive)
  (let (from to sym)
    (if (use-region-p)
        (progn
          (setq sym (buffer-substring-no-properties (mark) (point))))
      (progn
        (save-excursion
          (skip-syntax-backward "w_") (setq from (point)))
        (save-excursion
          (skip-syntax-forward "w_") (setq to (point)))
        (setq sym (buffer-substring-no-properties to from))))
    (helm-ag-project-root sym)))

(defun custom-flycheck-toggle-errors ()
  (interactive)
  (if (get-buffer "*Flycheck errors*")
      (progn
        (delete-window (get-buffer-window (get-buffer "*Flycheck errors*")))
        (kill-buffer "*Flycheck errors*"))
    (flycheck-list-errors)))

;; @see https://bitbucket.org/lyro/evil/issue/511/let-certain-minor-modes-key-bindings
(eval-after-load 'git-timemachine
  '(progn
     (evil-make-overriding-map git-timemachine-mode-map 'normal)
     ;; force update evil keymaps after git-timemachine-mode loaded
     (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)))

(evil-leader/set-leader "<SPC>")
(evil-leader/set-key
  "fs" 'save-buffer-always
  "fq" 'delete-window
  "fl" 'sr-speedbar-toggle

  "bd" 'kill-this-buffer
  "bs" 'switch-to-buffer
  "bl" 'buf-move-right
  "bh" 'buf-move-left
  "bj" 'buf-move-down
  "bk" 'buf-move-up

  "cd" 'cd
  "cl" 'custom-comment-line

  "gs" 'magit-status
  "gt" 'git-timemachine-toggle

  "hd" 'helm-dash
  "hD" 'helm-dash-at-point

  "ll" 'custom-flycheck-toggle-errors
  "ln" 'flycheck-next-error
  "lp" 'flycheck-previous-error

  "ph" 'helm-projectile-find-file
  "pa" 'helm-projectile-ag
  "pk" 'find-symbol-in-project
  "pd" 'projectile-dired
  "ps" 'helm-projectile-switch-project
  "pK" 'projectile-kill-buffers
  "pt" 'projectile-toggle-between-implementation-and-test
  "pT" 'projectile-find-implementation-or-test-other-window

  "ss" 'evil-search-word-forward
  "sr" 'replace-symbol

  "tn" 'elscreen-create
  "tl" 'elscreen-next
  "th" 'elscreen-previous
  "tq" 'elscreen-kill
  "tj" 'elscreen-select-and-goto

  "w" 'evil-window-map

  "<SPC>" 'helm-M-x)

(eval-after-load "hideshow"
  '(add-to-list 'hs-special-modes-alist
                 `(ruby-mode
                   ,(rx (or "def" "class" "module" "{" "[" "do")) ; Block start
                   ,(rx (or "}" "]" "end"))                  ; Block end
                   ,(rx (or "#" "=begin"))                   ; Comment start
                   ruby-forward-sexp nil)))

(require 'ruby-refactor)
(add-hook 'ruby-mode-hook 'hs-minor-mode)
(add-hook 'ruby-mode-hook 'ruby-refactor-mode-launch)
(add-hook 'ruby-mode-hook
          (lambda () (modify-syntax-entry ?_ "w")))

(defun add-mode-line-dirtrack ()
    "When editing a file, show the last 2 directories of the current path in the mode line."
    (add-to-list 'mode-line-buffer-identification 
                 '(:eval (substring default-directory 
                                    (+ 1 (string-match "/[^/]+/[^/]+/$" default-directory)) nil))))
(add-hook 'find-file-hook 'add-mode-line-dirtrack)

(defun projectile-rails-find-service ()
  (interactive)
  (projectile-rails-find-resource
   "service: "
   '(("app/services/" "/services/\\(.+\\)\\.rb$"))
  "app/services/${filename}.rb"))

(defun projectile-rails-find-presenter ()
  (interactive)
  (projectile-rails-find-resource
   "presenter: "
   '(("app/presenters/" "/presenters/\\(.+?\\)\\(_presenter\\)?\\.rb$"))
   "app/presenters/${filename}_presenter.rb"))

(defun projectile-rails-find-component ()
  (interactive)
  (projectile-rails-find-resource
   "component: "
   '(("app/assets/javascripts/components/" "/components/\\(.+\\)\\.js$"))
   "app/assets/javascripts/components/${filename}.js"))

(defun projectile-rails-setup ()
  "Customizations for projectile rails mode."
  (evil-leader/set-key
    "jc" 'projectile-rails-find-component
    
    "ra" 'projectile-rails-find-stylesheet
    "rA" 'projectile-rails-find-current-stylesheet

    "rb" 'projectile-rails-find-job

    "rc" 'projectile-rails-find-controller
    "rC" 'projectile-rails-find-current-controller

    "re" 'projectile-rails-find-environment

    "rf" 'projectile-rails-find-fixture
    "rF" 'projectile-rails-find-current-fixture

    "rg" 'projectile-rails-mode-goto-map

    "rh" 'projectile-rails-find-helper
    "rH" 'projectile-rails-find-current-helper

    "rj" 'projectile-rails-find-javascript
    "rJ" 'projectile-rails-find-current-javascript

    "rk" 'projectile-rails-find-rake-task

    "ri" 'projectile-rails-find-initializer

    "rl" 'projectile-rails-find-lib

    "rm" 'projectile-rails-find-model
    "rM" 'projectile-rails-find-current-model

    "rn" 'projectile-rails-find-migration
    "rN" 'projectile-rails-find-current-migration

    "ro" 'projectile-rails-find-log

    ;; "rp" 'projectile-rails-find-spec
    ;; "rP" 'projectile-rails-find-current-spec
    "rp" 'projectile-rails-find-presenter

    "rr" 'projectile-rails-console
    "rR" 'projectile-rails-server

    "rs" 'projectile-rails-find-service

    "rt" 'projectile-rails-find-test
    "rT" 'projectile-rails-find-current-test

    "rv" 'projectile-rails-find-view
    "rV" 'projectile-rails-find-current-view

    "rx" 'projectile-rails-extract-region

    "ry" 'projectile-rails-find-layout

    "rz" 'projectile-rails-find-serializer
    "rZ" 'projectile-rails-find-current-serializer

    "r@" 'projectile-rails-find-mailer
    "r!" 'projectile-rails-find-validator
  ))
                                   
(global-set-key (kbd "C-.") 'company-complete)
(setq company-idle-delay 0.1)

(setq windmove-wrap-around t)
(setq-default abbrev-mode t)

(require 'linum-relative)
(linum-relative-global-mode)

(indent-guide-global-mode)
(setq indent-guide-recursive t)

(require 'ruby-end)

(define-abbrev-table 'ruby-mode-abbrev-table '(
                                               ("dsc" "described_class")
                                               ("sbj" "subject")
                                               ("aseq" "assert_equal")
                                               ("ass" "assert")
                                               ("AS::" "ActiveSupport::")
                                               ("AR::" "ActiveRecord::")))

(define-key global-map (kbd "s-=") 'zoom-frm-in)
(define-key global-map (kbd "s--") 'zoom-frm-out)
(define-key global-map (kbd "s-0") 'zoom-frm-unzoom)
(define-key global-map (kbd "s-t") 'elscreen-create)
(define-key global-map (kbd "s-<return>") 'toggle-frame-fullscreen)
(define-key global-map (kbd "s-{") 'elscreen-previous)
(define-key global-map (kbd "s-}") 'elscreen-next)
(define-key global-map (kbd "s-s") 'save-buffer-always)

(require 'fill-column-indicator)
(fci-mode)
(set-fill-column 100)
(global-hl-line-mode)

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

; (require 'fzf)
; 
; (defun fzf-git-branches ()
;   "uses fzf to find a git branch"
;   (interactive)
;   (make-term "fzf" "git branch --no-merged | fzf | xargs git checkout"))

(require 'sr-speedbar)
(make-face 'speedbar-face)
(set-face-font 'speedbar-face "Lucida Grande 11")
(setq speedbar-mode-hook '(lambda () (buffer-face-set 'speedbar-face)))

(projectile-global-mode)
(require 'helm-projectile)
(helm-projectile-on)

(with-eval-after-load 'helm-projectile
  (defvar helm-source-file-not-found
    (helm-build-dummy-source
        "Create file"
      :action (lambda (cand) (find-file cand))))

(add-to-list 'helm-projectile-sources-list helm-source-file-not-found t))

;;; esc always quits
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

(require 'multiple-cursors)
(global-set-key (kbd "C->") 'mc/mark-next-like-this-symbol)
(global-set-key (kbd "C-<") 'mc/mark-previous-symbol-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

(defun flycheck-setup ()
  (global-flycheck-mode)
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (setq-default
    flycheck-disabled-checkers (append flycheck-disabled-checkers '(javascript-jshint))
    flycheck-temp-prefix ".flycheck"))

(defadvice web-mode-highlight-part (around tweak-jsx activate)
  (if (equal web-mode-content-type "jsx")
    (let ((web-mode-enable-part-face nil))
      ad-do-it)
    ad-do-it))

(defun modify-syntax-table-for-jsx ()
  (modify-syntax-entry ?< "(>")
  (modify-syntax-entry ?> ")<"))

(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "->") t nil)))))

(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))

(global-set-key [tab] 'tab-indent-or-complete)

(require 'diminish)
(defun custom-diminish ()
  (interactive)
  (diminish 'company-mode "ⓒ ")
  (diminish 'yas-minor-mode "ⓨ ")
  (diminish 'flycheck-mode "ⓕ ")
  (diminish 'projectile-mode "ⓟ ")
  (diminish 'projectile-rails-mode "ⓡ ")
  (diminish 'emmet-mode "ⓔ ")
  (diminish 'indent-guide-mode)
  (diminish 'linum-relative-mode)
  (diminish 'auto-revert-mode)
  (diminish 'undo-tree-mode)
  (diminish 'abbrev-mode)
  (diminish 'hs-minor-mode)
  (diminish 'ruby-end-mode)
  (diminish 'ruby-refactor-mode))

(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-jsx-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-jsx-mode))
(add-to-list 'auto-mode-alist '("\\.html\\(\+modal\\)?\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html.eex\\'" . web-mode))

(add-hook 'js2-mode-hook 'modify-syntax-table-for-jsx)
(add-hook 'js2-mode-hook #'smartparens-mode)
(add-hook 'after-init-hook 'global-company-mode)
(add-hook 'after-init-hook 'yas-global-mode)
(add-hook 'after-init-hook 'flycheck-setup)
(add-hook 'after-init-hook 'custom-diminish)
(add-hook 'projectile-mode-hook 'projectile-rails-on)
(add-hook 'projectile-rails-mode-hook 'projectile-rails-setup)
(add-hook 'web-mode-hook 'emmet-mode)
(add-hook 'web-mode-hook
          (lambda ()
            (flycheck-mode (cond ((equal web-mode-content-type "jsx") t)
                                 ((equal web-mode-content-type "javascript") t)
                                 (t nil)))
            (if (equal web-mode-content-type "javascript")
                (web-mode-set-content-type "jsx"))))

;; -------------------------------------------------------------------
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-dabbrev-downcase nil)
 '(custom-safe-themes
   (quote
    ("2a07975ec5ebe65da76fa3193e5e6500f63f22d01146231d46d3af6e63f59b4c" "edcb52500eb4a8c13fd94870175a5748b3a24fe8432c2ed0f3c077dace23cc4a" "6431fc318d1176ac3c372ab03fef94b8777316e84ab0351dc13d08b1fca16353" "d43120398682953ef18fd7e11e69c94e44d39bb2ab450c4e64815311542acbff" "b04425cc726711a6c91e8ebc20cf5a3927160681941e06bc7900a5a5bfe1a77f" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "8e3f020f1ce69cfa0c1ebee4e198feb28dd7eb31b7d77927e9c790819210c654" "930227e22122d1881db7c2c1ae712dcf715697a1c4d9864f8107a2c3c2da9f8b" "a17f246690840fcf3fc26cb845ffedd2d8e1161cae386c14df61dabb9af3a5a9" "0bd7a42bd443517e5e61dac3cabc24018fbd0c6b2b4199b3c4efd9e3727efd30" "cb18233197cedab557c70d171b511bed49cc702f428750925280090c31498bd2" "b3ce6fadd85126d247b72d4ed9ac4d2bb43c0e0fd1605008cafd54185f30b7eb" "aed73c6d0afcf2232bb25ed2d872c7a1c4f1bda6759f84afc24de6a1aec93da8" "232f715279fc131ed4facf6a517b84d23dca145fcc0e09c5e0f90eb534e1680f" "0b6645497e51d80eda1d337d6cabe31814d6c381e69491931a688836c16137ed" "b6db49cec08652adf1ff2341ce32c7303be313b0de38c621676122f255ee46db" "e1551b5516e0a439b6ab019ba00cee866e735f66f22ff67a5d882ad0f1383454" "50e7f9d112e821e42bd2b8410d50de966c35c7434dec12ddea99cb05dd368dd8" default)))
 '(diff-hl-margin-mode t)
 '(display-time-mode t)
 '(elscreen-display-screen-number nil)
 '(elscreen-prefix-key (kbd "C-c e"))
 '(elscreen-tab-display-control nil)
 '(elscreen-tab-display-kill-screen nil)
 '(evil-shift-round nil)
 '(evil-shift-width 2)
 '(flycheck-disabled-checkers (quote (javascript-jshint)))
 '(fzf/args nil)
 '(fzf/executable "/usr/local/bin/fzf")
 '(global-flycheck-mode t)
 '(helm-ag-base-command "/usr/local/bin/ag --nocolor --nogroup")
 '(helm-completion-in-region-fuzzy-match t)
 '(helm-mode nil)
 '(helm-mode-fuzzy-match t)
 '(helm-prevent-escaping-from-minibuffer nil)
 '(js-indent-level 2)
 '(js2-basic-offset 2)
 '(js2-mode-show-strict-warnings nil)
 '(js3-auto-indent-p t)
 '(js3-enter-indents-newline t)
 '(js3-indent-on-enter-key t)
 '(js3-mode-show-strict-warnings nil)
 '(linum-relative-current-symbol "")
 '(linum-relative-global-mode t)
 '(package-selected-packages
   (quote
    (jsx-mode yasnippet zoom-frm sass-mode emmet-mode alchemist elixir-mode ruby-refactor ruby-guard sr-speedbar multiple-cursors fill-column-indicator js2-mode yaml-mode buffer-move elscreen evil-magit web-mode magit ## helm-dash indent-guide projectile-rails linum-relative helm-ag helm-projectile evil-leader projectile fzf evil)))
 '(projectile-generic-command "ag -g \"\"")
 '(projectile-global-mode t)
 '(projectile-switch-project-action (quote helm-projectile-find-file))
 '(rm-blacklist
   (quote
    (" hl-p" "company" "yas" "Projectile" "ing" "LR" "Undo-Tree" "Abbrev" "hs")))
 '(ruby-end-insert-newline nil)
 '(speedbar-show-unknown-files t)
 '(term-scroll-show-maximum-output t)
 '(term-scroll-to-bottom-on-output t)
 '(web-mode-attr-indent-offset 2)
 '(web-mode-code-indent-offset 2)
 '(web-mode-markup-indent-offset 2))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight thin :height 120 :width normal :foundry "nil" :family "Input Mono Condensed"))))
 '(diff-hl-change ((t (:background "LightBlue1" :foreground "SteelBlue1"))))
 '(elscreen-tab-current-screen-face ((t (:background "controlHighlightColor" :foreground "black"))))
 '(elscreen-tab-other-screen-face ((t (:background "disabledControlTextColor" :foreground "controlLightHighlightColor")))))
