;;; .emacs --- take care of business

;;; Code:
;;; Commentary:
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(global-linum-mode 1)

(ido-mode 1)

(setq ido-enable-flex-matching t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t)

(define-key global-map (kbd "RET") 'newline-and-indent)

(add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp"))

(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)

(load-theme 'base16-oceanicnext-dark t)

(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

(require 'evil)
(global-evil-leader-mode)
(evil-mode 1)

(require 'evil-magit)

(setq evil-shift-width 2)
(setq-default indent-tabs-mode nil)

(evil-leader/set-leader "<SPC>")
(evil-leader/set-key
  "fs" 'save-buffer
  "fq" 'kill-buffer-and-window

  "bd" 'kill-this-buffer
  "bs" 'switch-to-buffer

  "w=" 'balance-windows
  "wh" 'windmove-left
  "wk" 'windmove-up
  "wj" 'windmove-down
  "wl" 'windmove-right

  "ph" 'helm-projectile
  "pa" 'helm-do-ag-project-root

  "hd" 'helm-dash
  "hD" 'helm-dash-at-point

  "tn" 'elscreen-create
  "tl" 'elscreen-next
  "th" 'elscreen-previous
  "tq" 'elscreen-kill
  "tj" 'elscreen-jump

  "cl" 'comment-line

  "gs" 'magit-status)

(setq helm-dash-browser-func 'eww)
(elscreen-start)

(eval-after-load "hideshow"
  '(add-to-list 'hs-special-modes-alist
                 `(ruby-mode
                   ,(rx (or "def" "class" "module" "{" "[" "do")) ; Block start
                   ,(rx (or "}" "]" "end"))                  ; Block end
                   ,(rx (or "#" "=begin"))                   ; Comment start
                   ruby-forward-sexp nil)))

(add-hook 'ruby-mode-hook 'hs-minor-mode)

(defun projectile-rails-setup ()
  "Customizations for projectile rails mode."
  (evil-leader/set-key
    "rm" 'projectile-rails-find-model
    "rM" 'projectile-rails-find-current-model

    "rc" 'projectile-rails-find-controller
    "rC" 'projectile-rails-find-current-controller

    "rv" 'projectile-rails-find-view
    "rV" 'projectile-rails-find-current-view

    "rj" 'projectile-rails-find-javascript
    "rJ" 'projectile-rails-find-current-javascript

    "rs" 'projectile-rails-find-stylesheet
    "rS" 'projectile-rails-find-current-stylesheet

    "rh" 'projectile-rails-find-helper
    "rH" 'projectile-rails-find-current-helper

    "rp" 'projectile-rails-find-spec
    "rP" 'projectile-rails-find-current-spec

    "rt" 'projectile-rails-find-test
    "rT" 'projectile-rails-find-current-test

    "rn" 'projectile-rails-find-migration
    "rN" 'projectile-rails-find-current-migration

    "rr" 'projectile-rails-console
    "rR" 'projectile-rails-server

    "ru" 'projectile-rails-find-fixture
    "rU" 'projectile-rails-find-current-fixture

    "rl" 'projectile-rails-find-lib
    "rf" 'projectile-rails-find-feature
    "ri" 'projectile-rails-find-initializer
    "ro" 'projectile-rails-find-log
    "re" 'projectile-rails-find-environment
    "ra" 'projectile-rails-find-locale
    "r@" 'projectile-rails-find-mailer
    "r!" 'projectile-rails-find-validator
    "ry" 'projectile-rails-find-layout
    "rk" 'projectile-rails-find-rake-task
    "rb" 'projectile-rails-find-job

    "rz" 'projectile-rails-find-serializer
    "rZ" 'projectile-rails-find-current-serializer

    "rx" 'projectile-rails-extract-region

    "rg" 'projectile-rails-mode-goto-map
    "r!" 'projectile-rails-mode-run-map
  ))

(global-set-key (kbd "C-.") 'company-complete)
(setq company-idle-delay 0.1)

(setq windmove-wrap-around t)
(setq-default abbrev-mode t)

(require 'linum-relative)
(linum-relative-global-mode)

(indent-guide-global-mode)
(setq indent-guide-recursive t)

(require 'ruby-end)

(define-abbrev-table 'ruby-mode-abbrev-table '(
					       ("dsc" "described_class")
					       ("sbj" "subject")
					       ("aseq" "assert_equal")
					       ("ass" "assert")))

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

; (require 'fzf)
; 
; (defun fzf-git-branches ()
;   "uses fzf to find a git branch"
;   (interactive)
;   (make-term "fzf" "git branch --no-merged | fzf | xargs git checkout"))

(projectile-global-mode)

(add-hook 'after-init-hook 'global-company-mode)
(add-hook 'after-init-hook #'global-flycheck-mode)
(add-hook 'after-init-hook 'electric-pair-mode)
(add-hook 'projectile-mode-hook 'projectile-rails-on)
(add-hook 'projectile-rails-mode-hook 'projectile-rails-setup)

;; -------------------------------------------------------------------
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("b6db49cec08652adf1ff2341ce32c7303be313b0de38c621676122f255ee46db" "e1551b5516e0a439b6ab019ba00cee866e735f66f22ff67a5d882ad0f1383454" "50e7f9d112e821e42bd2b8410d50de966c35c7434dec12ddea99cb05dd368dd8" default)))
 '(elscreen-display-screen-number nil)
 '(evil-shift-round nil)
 '(evil-shift-width 2)
 '(fzf/args nil)
 '(fzf/executable "/usr/local/bin/fzf")
 '(helm-ag-base-command "/usr/local/bin/ag --nocolor --nogroup")
 '(package-selected-packages
   (quote
    (evil-magit web-mode magit elscreen ## helm-dash indent-guide projectile-rails linum-relative helm-ag helm-projectile evil-leader projectile fzf base16-theme evil)))
 '(term-scroll-show-maximum-output t)
 '(term-scroll-to-bottom-on-output t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 120 :width normal :foundry "nil" :family "Input Mono Condensed"))))
 '(elscreen-tab-other-screen-face ((t (:background "disabledControlTextColor" :foreground "controlLightHighlightColor")))))
